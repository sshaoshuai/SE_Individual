#include <iostream>
#include <cstdio>
#include <algorithm>
#include <time.h>
using namespace std;

const unsigned int BASIC_PRIME_TOP = 100000;
const unsigned int SEGMENT_LEN = 10000000;
const unsigned int SEGMENT_NUM = 420;
const unsigned int primes_cnt[SEGMENT_NUM + 1] = {0, 664579, 1270607, 1857859, 2433654, 3001134, 3562115, 4118064, 4669382, 5216954, 5761455, 6303309,
6841648, 7378187, 7912199, 8444396, 8974458, 9503083, 10030385, 10555473, 11078937, 11601626,
12122540, 12642573, 13161544, 13679318, 14195860, 14711384, 15226069, 15739663, 16252325, 16764521,
17275206, 17785475, 18294605, 18803526, 19311288, 19818405, 20325373, 20831210, 21336326, 21840713,
22344479, 22848050, 23350555, 23853038, 24354548, 24855718, 25356424, 25856368, 26355867, 26854252,
27352687, 27850698, 28348381, 28845356, 29342150, 29838286, 30334175, 30829544, 31324703, 31819444,
32313388, 32807229, 33300450, 33793395, 34286170, 34778319, 35270167, 35761747, 36252931, 36743905,
37234048, 37724170, 38213987, 38703181, 39192219, 39680979, 40169476, 40658253, 41146179, 41634187,
42121502, 42608404, 43095410, 43581966, 44067840, 44553888, 45039361, 45524412, 46009215, 46494557,
46979583, 47463433, 47947424, 48431471, 48915316, 49398798, 49881580, 50364709, 50847534, 51329983,
51812321, 52294318, 52776212, 53257350, 53738557, 54219990, 54700635, 55181788, 55662470, 56142903,
56622753, 57102236, 57581414, 58060275, 58539733, 59019102, 59498032, 59976241, 60454705, 60932761,
61411047, 61888328, 62366021, 62843676, 63320966, 63798708, 64275439, 64752124, 65228333, 65705361,
66181282, 66657104, 67133252, 67609216, 68085138, 68560537, 69035407, 69510341, 69985473, 70459856,
70934626, 71409034, 71883002, 72357409, 72831347, 73304900, 73779064, 74252677, 74726528, 75199715,
75672734, 76146047, 76618438, 77091082, 77563693, 78035499, 78507915, 78979967, 79451833, 79923617,
80394795, 80866553, 81338327, 81809269, 82279850, 82750863, 83221805, 83692860, 84163019, 84633952,
85104323, 85574438, 86044101, 86514020, 86984006, 87453575, 87923092, 88392508, 88862422, 89331502,
89800273, 90269041, 90737943, 91206350, 91674904, 92143195, 92611517, 93079603, 93547928, 94015751,
94483423, 94950995, 95418606, 95886225, 96353875, 96821037, 97288440, 97755641, 98222287, 98689899,
99156962, 99623163, 100089871, 100556393, 101022313, 101488558, 101954626, 102420732, 102886526, 103352849,
103818920, 104283918, 104748778, 105214609, 105679943, 106145123, 106610598, 107075254, 107540122, 108004655,
108469335, 108934016, 109398471, 109862949, 110327311, 110792152, 111256651, 111720807, 112184940, 112648396,
113112027, 113575726, 114039346, 114502477, 114965865, 115429202, 115892315, 116355501, 116818447, 117281057,
117743893, 118206828, 118669628, 119131774, 119594385, 120056675, 120519295, 120981472, 121443371, 121905534,
122367757, 122829801, 123291907, 123753846, 124215747, 124677602, 125139201, 125600658, 126062167, 126522860,
126984098, 127445024, 127905890, 128366505, 128827456, 129288064, 129748884, 130209594, 130670192, 131130716,
131591207, 132050748, 132510959, 132970642, 133430688, 133890653, 134350870, 134810676, 135270258, 135730230,
136189857, 136649664, 137108741, 137568157, 138027607, 138487092, 138946190, 139405198, 139864011, 140323164,
140781724, 141240780, 141699446, 142158287, 142616407, 143075092, 143533218, 143991726, 144449537, 144907436,
145365732, 145823350, 146281749, 146739737, 147197715, 147655871, 148113825, 148571420, 149028641, 149485685,
149943346, 150401039, 150857976, 151315404, 151772733, 152230144, 152686986, 153143966, 153600805, 154058111,
154514452, 154971154, 155427781, 155884247, 156341328, 156797046, 157253442, 157709870, 158165829, 158622185,
159078766, 159534856, 159990891, 160446746, 160902119, 161358024, 161813919, 162269712, 162725196, 163180838,
163636385, 164092483, 164547484, 165003087, 165458356, 165914057, 166369097, 166824245, 167279333, 167734768,
168189772, 168644709, 169099647, 169554450, 170009652, 170464191, 170918408, 171372981, 171827136, 172281569,
172735825, 173190593, 173644810, 174099561, 174553468, 175007697, 175462084, 175915686, 176369517, 176823245,
177277397, 177731576, 178185476, 178639090, 179092527, 179546259, 179999595, 180452903, 180906194, 181359670,
181813260, 182266343, 182719482, 183171976, 183624944, 184078254, 184531078, 184984095, 185436625, 185889713,
186341803, 186794319, 187247261, 187700003, 188152389, 188605017, 189057071, 189509388, 189961812, 190413921,
190865713, 191317917, 191769865, 192221866, 192674189, 193126079, 193577541, 194029285, 194481069, 194932949,
195385047, 195836979, 196288511, 196739921, 197191474, 197642404, 198093391, 198544921, 198996103};


clock_t		tStart = 0;
void setTime(const char * prompt)
{
	printf("%s\n", prompt);
	tStart = clock();
}
void getTime(const char * prompt)
{
	double time = (double)(clock() - tStart) / (double)CLOCKS_PER_SEC;
	printf("%s %f\n", prompt, time);
}





bool isPrime[SEGMENT_LEN + 6];
unsigned int ans[SEGMENT_LEN + 6], basic_primes[BASIC_PRIME_TOP + 6], cnt = 0, basic_cnt = 0;

void linear_make_prime(unsigned int Top)  {
	memset(isPrime, true, sizeof(isPrime));
	cnt = 0;
	for (unsigned int i = 2; i <= Top; ++i){
		if (isPrime[i])
			ans[++cnt] = i;
		for (unsigned int k = 1; k <= cnt; k++){
			if (i * ans[k] > Top) break;
			isPrime[i * ans[k]] = false;
			if (i % ans[k] == 0) break;
		}
		
	}
	//printf("Tot Prime: %d\n", cnt);
	return;
}

void make_basic_primes(){
	memset(isPrime, true, sizeof(isPrime));
	for (unsigned int i = 2; i <= BASIC_PRIME_TOP; ++i){
		if (isPrime[i])
			basic_primes[++basic_cnt] = i;
		for (unsigned int k = 1; k <= basic_cnt; k++){
			if (i * basic_primes[k] > BASIC_PRIME_TOP) break;
			isPrime[i * basic_primes[k]] = false;
			if (i % basic_primes[k] == 0) break;
		}
	}
}

unsigned int segment_sieve(unsigned int L, unsigned int R){
	memset(isPrime, true, sizeof(isPrime));
	cnt = 0;
	if (L <= 1) L = 2;
	for (unsigned int i = 1; i <= basic_cnt; i++){
		int l = L / basic_primes[i];
		if (L % basic_primes[i] != 0) l++;
		if (l == 1) l++;
		int r = R / basic_primes[i];

		for (unsigned int k = l; k <= r; k++)
			isPrime[k * basic_primes[i] - L] = false;
	}
	for (unsigned int i = L; i <= R; i++)
		if (isPrime[i - L]) ans[++cnt] = i;
	return cnt;
}


void print_segment_table(){
	unsigned int last = 0;
	for (unsigned int i = 0; i < SEGMENT_NUM; i++){
		unsigned int now = segment_sieve(SEGMENT_LEN * i, SEGMENT_LEN * (i + 1) - 1);
		last += now;
		printf("%u, ", last);
		if (i % 10 == 0 && i)
			printf("\n");
	}
}

unsigned int find_nth_prime(unsigned int n){
	int seg = 0;
	for (int i = 0; i < SEGMENT_NUM; i++)
	if (n <= primes_cnt[i]){
		seg = i;
		break;
	}

	int pos = n - primes_cnt[seg]






}


void PrintNum(unsigned int x){
	int temp[4], pos = 0;
	while (x > 0){
		temp[pos++] = x % 1000;
		x /= 1000;
	}
	for (int i = pos - 1; i > 0; i--) printf("%u ", temp[i]);
	printf("%u\n", temp[0]);
}





int main(int argc, char *argv[])
{
	if (argc < 2){
		printf("Parameter Error\n");
		return 0;
	}

	make_basic_primes();





	print_segment_table();
	
	//
	//int now = segment_sieve(1, 10000000 - 1);
	//cout << cnt << " " << ans[1] << " " << ans[cnt] << endl;

	//now += segment_sieve(1000000, 2000000 - 1);
	//cout << now << endl;
	//cout << cnt << " " << ans[1] << " " << ans[cnt] << endl;


	//setTime("Make Prime: ");
	//linear_make_prime(MAX);
	//PrintNum(ans[n]);
	//getTime("Make End");


	//setTime("Make Prime: ");
	//make_prime(179424873);
	//PrintNum(ans[n]);
	//getTime("Make End");

	

	getchar();
	return 0;
}


